# Generated by Django 4.2 on 2023-06-20 02:20

import core.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Address",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "public_place",
                    models.CharField(max_length=100, verbose_name="Logradouro"),
                ),
                (
                    "neighborhood",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="Bairro"
                    ),
                ),
                (
                    "city",
                    models.CharField(
                        blank=True, max_length=50, verbose_name="Cidade"
                    ),
                ),
                ("zip_code", models.IntegerField(verbose_name="CEP")),
                ("number", models.IntegerField(verbose_name="Número")),
                (
                    "complement",
                    models.CharField(
                        blank=True,
                        max_length=10,
                        null=True,
                        verbose_name="Complemento",
                    ),
                ),
            ],
            options={
                "verbose_name": "Endereço",
                "verbose_name_plural": "Endereços",
            },
        ),
        migrations.CreateModel(
            name="Occupation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=30, verbose_name="Nome")),
            ],
            options={
                "verbose_name": "Profissão",
                "verbose_name_plural": "Profissões",
            },
        ),
        migrations.CreateModel(
            name="Telephone",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "number",
                    models.CharField(max_length=20, verbose_name="Número"),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[("cel", "Celular"), ("fix", "Fixo")],
                        max_length=3,
                        verbose_name="Número",
                    ),
                ),
            ],
            options={
                "verbose_name": "Telefone",
                "verbose_name_plural": "Telefones",
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "password",
                    models.CharField(max_length=128, verbose_name="password"),
                ),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                ("uid", models.UUIDField(default=uuid.uuid4, editable=False)),
                (
                    "name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="Nome"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        max_length=254, unique=True, verbose_name="Email"
                    ),
                ),
                (
                    "occupation",
                    models.CharField(
                        choices=[("AT", "Autônomo")], default="AT", max_length=2
                    ),
                ),
                (
                    "birth_date",
                    models.DateField(verbose_name="Data de Nascimento"),
                ),
                (
                    "type_of_audience",
                    models.CharField(
                        choices=[
                            ("MIG", "Migrando para a área de agilidade"),
                            ("PRO", "Profissional da área de agilidade"),
                            ("CUR", "Curioso sobre o universo da agilidade"),
                        ],
                        default="CUR",
                        max_length=3,
                        verbose_name="Tipo de público",
                    ),
                ),
                ("cpf", models.CharField(blank=True, max_length=11, null=True)),
                (
                    "registered",
                    models.BooleanField(default=False, verbose_name="Inscrito"),
                ),
                (
                    "subscriber",
                    models.BooleanField(
                        default=False, verbose_name="Assinante"
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False, verbose_name="Foi deletado?"
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Data da Deleção"
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="Ativo"),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Data da Entrada"
                    ),
                ),
                (
                    "address",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="addressies",
                        to="core.address",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "telephone",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="telephones",
                        to="core.telephone",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
            },
            managers=[
                ("objects", core.models.UserManager()),
            ],
        ),
    ]
